
SPI_SLAVE_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000019e4  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  00001a82  2**0
                  ALLOC
  3 .stab         00001320  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b92  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003936  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00003be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000582f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000671a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000074c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000078b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_1>
       8:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_2>
       c:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <main>
      8a:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_Interface.h"
#include "../Include/MCAL/DIO/DIO_priivate.h"
#include "../Include/MCAL/DIO/DIO_configuration.h"

void MDIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION, PORTA_PIN6_DIRECTION, PORTA_PIN5_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
                        PORTA_PIN4_DIRECTION, PORTA_PIN3_DIRECTION, PORTA_PIN2_DIRECTION, PORTA_PIN1_DIRECTION, PORTA_PIN0_DIRECTION);

    DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION, PORTB_PIN6_DIRECTION, PORTB_PIN5_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f e4       	ldi	r24, 0x4F	; 79
     b5c:	80 83       	st	Z, r24
                        PORTB_PIN4_DIRECTION, PORTB_PIN3_DIRECTION, PORTB_PIN2_DIRECTION, PORTB_PIN1_DIRECTION, PORTB_PIN0_DIRECTION);

    DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION, PORTC_PIN6_DIRECTION, PORTC_PIN5_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
                        PORTC_PIN4_DIRECTION, PORTC_PIN3_DIRECTION, PORTC_PIN2_DIRECTION, PORTC_PIN1_DIRECTION, PORTC_PIN0_DIRECTION);

    DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION, PORTD_PIN6_DIRECTION, PORTD_PIN5_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 83       	st	Z, r24
                        PORTD_PIN4_DIRECTION, PORTD_PIN3_DIRECTION, PORTD_PIN2_DIRECTION, PORTD_PIN1_DIRECTION, PORTD_PIN0_DIRECTION);

    PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE, PORTA_PIN6_VALUE, PORTA_PIN5_VALUE,
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 83       	st	Z, r24
                         PORTA_PIN4_VALUE, PORTA_PIN3_VALUE, PORTA_PIN2_VALUE, PORTA_PIN1_VALUE, PORTA_PIN0_VALUE);

    PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE, PORTB_PIN6_VALUE, PORTB_PIN5_VALUE,
     b76:	e8 e3       	ldi	r30, 0x38	; 56
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 ef       	ldi	r24, 0xF0	; 240
     b7c:	80 83       	st	Z, r24
                         PORTB_PIN4_VALUE, PORTB_PIN3_VALUE, PORTB_PIN2_VALUE, PORTB_PIN1_VALUE, PORTB_PIN0_VALUE);

    PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE, PORTC_PIN6_VALUE, PORTC_PIN5_VALUE,
     b7e:	e5 e3       	ldi	r30, 0x35	; 53
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	10 82       	st	Z, r1
                         PORTC_PIN4_VALUE, PORTC_PIN3_VALUE, PORTC_PIN2_VALUE, PORTC_PIN1_VALUE, PORTC_PIN0_VALUE);

    PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE, PORTD_PIN6_VALUE, PORTD_PIN5_VALUE,
     b84:	e2 e3       	ldi	r30, 0x32	; 50
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	8c e0       	ldi	r24, 0x0C	; 12
     b8a:	80 83       	st	Z, r24
                         PORTD_PIN4_VALUE, PORTD_PIN3_VALUE, PORTD_PIN2_VALUE, PORTD_PIN1_VALUE, PORTD_PIN0_VALUE);
}
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <MDIO_voidSetPinDirection>:

// PORT ID :- PORTA - PORTB - PORTC - PORTD
// PIN ID  :- PIN0 ... PIN7
// Direction : PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPinDirection(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Direction)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2d 97       	sbiw	r28, 0x0d	; 13
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	6a 83       	std	Y+2, r22	; 0x02
     baa:	4b 83       	std	Y+3, r20	; 0x03
    switch (A_u8PortId)
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	3d 87       	std	Y+13, r19	; 0x0d
     bb4:	2c 87       	std	Y+12, r18	; 0x0c
     bb6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	91 05       	cpc	r25, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <MDIO_voidSetPinDirection+0x30>
     bc0:	4f c0       	rjmp	.+158    	; 0xc60 <MDIO_voidSetPinDirection+0xce>
     bc2:	2c 85       	ldd	r18, Y+12	; 0x0c
     bc4:	3d 85       	ldd	r19, Y+13	; 0x0d
     bc6:	22 30       	cpi	r18, 0x02	; 2
     bc8:	31 05       	cpc	r19, r1
     bca:	2c f4       	brge	.+10     	; 0xbd6 <MDIO_voidSetPinDirection+0x44>
     bcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bce:	9d 85       	ldd	r25, Y+13	; 0x0d
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	71 f0       	breq	.+28     	; 0xbf0 <MDIO_voidSetPinDirection+0x5e>
     bd4:	eb c0       	rjmp	.+470    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
     bd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     bd8:	3d 85       	ldd	r19, Y+13	; 0x0d
     bda:	22 30       	cpi	r18, 0x02	; 2
     bdc:	31 05       	cpc	r19, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <MDIO_voidSetPinDirection+0x50>
     be0:	77 c0       	rjmp	.+238    	; 0xcd0 <MDIO_voidSetPinDirection+0x13e>
     be2:	8c 85       	ldd	r24, Y+12	; 0x0c
     be4:	9d 85       	ldd	r25, Y+13	; 0x0d
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	91 05       	cpc	r25, r1
     bea:	09 f4       	brne	.+2      	; 0xbee <MDIO_voidSetPinDirection+0x5c>
     bec:	a9 c0       	rjmp	.+338    	; 0xd40 <MDIO_voidSetPinDirection+0x1ae>
     bee:	de c0       	rjmp	.+444    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
    {
    case PORTA:
        switch (A_u8Direction)
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	3b 87       	std	Y+11, r19	; 0x0b
     bf8:	2a 87       	std	Y+10, r18	; 0x0a
     bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	d1 f0       	breq	.+52     	; 0xc36 <MDIO_voidSetPinDirection+0xa4>
     c02:	2a 85       	ldd	r18, Y+10	; 0x0a
     c04:	3b 85       	ldd	r19, Y+11	; 0x0b
     c06:	21 30       	cpi	r18, 0x01	; 1
     c08:	31 05       	cpc	r19, r1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <MDIO_voidSetPinDirection+0x7c>
     c0c:	cf c0       	rjmp	.+414    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRA_REG, A_u8PinId);
     c0e:	aa e3       	ldi	r26, 0x3A	; 58
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ea e3       	ldi	r30, 0x3A	; 58
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <MDIO_voidSetPinDirection+0x9a>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <MDIO_voidSetPinDirection+0x96>
     c30:	84 2b       	or	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	bb c0       	rjmp	.+374    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
            break;
        case PIN_INPUT:
            CLR_BIT(DDRA_REG, A_u8PinId);
     c36:	aa e3       	ldi	r26, 0x3A	; 58
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ea e3       	ldi	r30, 0x3A	; 58
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <MDIO_voidSetPinDirection+0xc2>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <MDIO_voidSetPinDirection+0xbe>
     c58:	80 95       	com	r24
     c5a:	84 23       	and	r24, r20
     c5c:	8c 93       	st	X, r24
     c5e:	a6 c0       	rjmp	.+332    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
        default:
            break;
        }
        break;
    case PORTB:
        switch (A_u8Direction)
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	39 87       	std	Y+9, r19	; 0x09
     c68:	28 87       	std	Y+8, r18	; 0x08
     c6a:	88 85       	ldd	r24, Y+8	; 0x08
     c6c:	99 85       	ldd	r25, Y+9	; 0x09
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	d1 f0       	breq	.+52     	; 0xca6 <MDIO_voidSetPinDirection+0x114>
     c72:	28 85       	ldd	r18, Y+8	; 0x08
     c74:	39 85       	ldd	r19, Y+9	; 0x09
     c76:	21 30       	cpi	r18, 0x01	; 1
     c78:	31 05       	cpc	r19, r1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <MDIO_voidSetPinDirection+0xec>
     c7c:	97 c0       	rjmp	.+302    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRB_REG, A_u8PinId);
     c7e:	a7 e3       	ldi	r26, 0x37	; 55
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e7 e3       	ldi	r30, 0x37	; 55
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <MDIO_voidSetPinDirection+0x10a>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <MDIO_voidSetPinDirection+0x106>
     ca0:	84 2b       	or	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	83 c0       	rjmp	.+262    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
            break;
        case PIN_INPUT:
            CLR_BIT(DDRB_REG, A_u8PinId);
     ca6:	a7 e3       	ldi	r26, 0x37	; 55
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e3       	ldi	r30, 0x37	; 55
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <MDIO_voidSetPinDirection+0x132>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <MDIO_voidSetPinDirection+0x12e>
     cc8:	80 95       	com	r24
     cca:	84 23       	and	r24, r20
     ccc:	8c 93       	st	X, r24
     cce:	6e c0       	rjmp	.+220    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
        default:
            break;
        }
        break;
    case PORTC:
        switch (A_u8Direction)
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3f 83       	std	Y+7, r19	; 0x07
     cd8:	2e 83       	std	Y+6, r18	; 0x06
     cda:	8e 81       	ldd	r24, Y+6	; 0x06
     cdc:	9f 81       	ldd	r25, Y+7	; 0x07
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	d1 f0       	breq	.+52     	; 0xd16 <MDIO_voidSetPinDirection+0x184>
     ce2:	2e 81       	ldd	r18, Y+6	; 0x06
     ce4:	3f 81       	ldd	r19, Y+7	; 0x07
     ce6:	21 30       	cpi	r18, 0x01	; 1
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f0       	breq	.+2      	; 0xcee <MDIO_voidSetPinDirection+0x15c>
     cec:	5f c0       	rjmp	.+190    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRC_REG, A_u8PinId);
     cee:	a4 e3       	ldi	r26, 0x34	; 52
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e4 e3       	ldi	r30, 0x34	; 52
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <MDIO_voidSetPinDirection+0x17a>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <MDIO_voidSetPinDirection+0x176>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	4b c0       	rjmp	.+150    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
            break;
        case PIN_INPUT:
            CLR_BIT(DDRC_REG, A_u8PinId);
     d16:	a4 e3       	ldi	r26, 0x34	; 52
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e4 e3       	ldi	r30, 0x34	; 52
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <MDIO_voidSetPinDirection+0x1a2>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <MDIO_voidSetPinDirection+0x19e>
     d38:	80 95       	com	r24
     d3a:	84 23       	and	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	36 c0       	rjmp	.+108    	; 0xdac <MDIO_voidSetPinDirection+0x21a>
        default:
            break;
        }
        break;
    case PORTD:
        switch (A_u8Direction)
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	c9 f0       	breq	.+50     	; 0xd84 <MDIO_voidSetPinDirection+0x1f2>
     d52:	2c 81       	ldd	r18, Y+4	; 0x04
     d54:	3d 81       	ldd	r19, Y+5	; 0x05
     d56:	21 30       	cpi	r18, 0x01	; 1
     d58:	31 05       	cpc	r19, r1
     d5a:	41 f5       	brne	.+80     	; 0xdac <MDIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRD_REG, A_u8PinId);
     d5c:	a1 e3       	ldi	r26, 0x31	; 49
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e1 e3       	ldi	r30, 0x31	; 49
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <MDIO_voidSetPinDirection+0x1e8>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <MDIO_voidSetPinDirection+0x1e4>
     d7e:	84 2b       	or	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	14 c0       	rjmp	.+40     	; 0xdac <MDIO_voidSetPinDirection+0x21a>
            break;
        case PIN_INPUT:
            CLR_BIT(DDRD_REG, A_u8PinId);
     d84:	a1 e3       	ldi	r26, 0x31	; 49
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e1 e3       	ldi	r30, 0x31	; 49
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <MDIO_voidSetPinDirection+0x210>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <MDIO_voidSetPinDirection+0x20c>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
        }
        break;
    default:
        break;
    }
}
     dac:	2d 96       	adiw	r28, 0x0d	; 13
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <MDIO_voidSetPinValue>:

// PORT ID :- PORTA - PORTB - PORTC - PORTD
// PIN ID  :- PIN0 ... PIN7
// Value   : PIN_HIGH - PIN_LOW
void MDIO_voidSetPinValue(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Value)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2d 97       	sbiw	r28, 0x0d	; 13
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	6a 83       	std	Y+2, r22	; 0x02
     dd6:	4b 83       	std	Y+3, r20	; 0x03
    switch (A_u8PortId)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	3d 87       	std	Y+13, r19	; 0x0d
     de0:	2c 87       	std	Y+12, r18	; 0x0c
     de2:	8c 85       	ldd	r24, Y+12	; 0x0c
     de4:	9d 85       	ldd	r25, Y+13	; 0x0d
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <MDIO_voidSetPinValue+0x30>
     dec:	4f c0       	rjmp	.+158    	; 0xe8c <MDIO_voidSetPinValue+0xce>
     dee:	2c 85       	ldd	r18, Y+12	; 0x0c
     df0:	3d 85       	ldd	r19, Y+13	; 0x0d
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	2c f4       	brge	.+10     	; 0xe02 <MDIO_voidSetPinValue+0x44>
     df8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	71 f0       	breq	.+28     	; 0xe1c <MDIO_voidSetPinValue+0x5e>
     e00:	eb c0       	rjmp	.+470    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
     e02:	2c 85       	ldd	r18, Y+12	; 0x0c
     e04:	3d 85       	ldd	r19, Y+13	; 0x0d
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	31 05       	cpc	r19, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <MDIO_voidSetPinValue+0x50>
     e0c:	77 c0       	rjmp	.+238    	; 0xefc <MDIO_voidSetPinValue+0x13e>
     e0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e10:	9d 85       	ldd	r25, Y+13	; 0x0d
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <MDIO_voidSetPinValue+0x5c>
     e18:	a9 c0       	rjmp	.+338    	; 0xf6c <MDIO_voidSetPinValue+0x1ae>
     e1a:	de c0       	rjmp	.+444    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
    {
    case PORTA:
        switch (A_u8Value)
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	3b 87       	std	Y+11, r19	; 0x0b
     e24:	2a 87       	std	Y+10, r18	; 0x0a
     e26:	8a 85       	ldd	r24, Y+10	; 0x0a
     e28:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	d1 f0       	breq	.+52     	; 0xe62 <MDIO_voidSetPinValue+0xa4>
     e2e:	2a 85       	ldd	r18, Y+10	; 0x0a
     e30:	3b 85       	ldd	r19, Y+11	; 0x0b
     e32:	21 30       	cpi	r18, 0x01	; 1
     e34:	31 05       	cpc	r19, r1
     e36:	09 f0       	breq	.+2      	; 0xe3a <MDIO_voidSetPinValue+0x7c>
     e38:	cf c0       	rjmp	.+414    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTA_REG, A_u8PinId);
     e3a:	ab e3       	ldi	r26, 0x3B	; 59
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e3       	ldi	r30, 0x3B	; 59
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <MDIO_voidSetPinValue+0x9a>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <MDIO_voidSetPinValue+0x96>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	bb c0       	rjmp	.+374    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
            break;
        case PIN_LOW:
            CLR_BIT(PORTA_REG, A_u8PinId);
     e62:	ab e3       	ldi	r26, 0x3B	; 59
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	eb e3       	ldi	r30, 0x3B	; 59
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <MDIO_voidSetPinValue+0xc2>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <MDIO_voidSetPinValue+0xbe>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	a6 c0       	rjmp	.+332    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
        default:
            break;
        }
        break;
    case PORTB:
        switch (A_u8Value)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	39 87       	std	Y+9, r19	; 0x09
     e94:	28 87       	std	Y+8, r18	; 0x08
     e96:	88 85       	ldd	r24, Y+8	; 0x08
     e98:	99 85       	ldd	r25, Y+9	; 0x09
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	d1 f0       	breq	.+52     	; 0xed2 <MDIO_voidSetPinValue+0x114>
     e9e:	28 85       	ldd	r18, Y+8	; 0x08
     ea0:	39 85       	ldd	r19, Y+9	; 0x09
     ea2:	21 30       	cpi	r18, 0x01	; 1
     ea4:	31 05       	cpc	r19, r1
     ea6:	09 f0       	breq	.+2      	; 0xeaa <MDIO_voidSetPinValue+0xec>
     ea8:	97 c0       	rjmp	.+302    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTB_REG, A_u8PinId);
     eaa:	a8 e3       	ldi	r26, 0x38	; 56
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e8 e3       	ldi	r30, 0x38	; 56
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <MDIO_voidSetPinValue+0x10a>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <MDIO_voidSetPinValue+0x106>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	83 c0       	rjmp	.+262    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
            break;
        case PIN_LOW:
            CLR_BIT(PORTB_REG, A_u8PinId);
     ed2:	a8 e3       	ldi	r26, 0x38	; 56
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e8 e3       	ldi	r30, 0x38	; 56
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <MDIO_voidSetPinValue+0x132>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <MDIO_voidSetPinValue+0x12e>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	6e c0       	rjmp	.+220    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
        default:
            break;
        }
        break;
    case PORTC:
        switch (A_u8Value)
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3f 83       	std	Y+7, r19	; 0x07
     f04:	2e 83       	std	Y+6, r18	; 0x06
     f06:	8e 81       	ldd	r24, Y+6	; 0x06
     f08:	9f 81       	ldd	r25, Y+7	; 0x07
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	d1 f0       	breq	.+52     	; 0xf42 <MDIO_voidSetPinValue+0x184>
     f0e:	2e 81       	ldd	r18, Y+6	; 0x06
     f10:	3f 81       	ldd	r19, Y+7	; 0x07
     f12:	21 30       	cpi	r18, 0x01	; 1
     f14:	31 05       	cpc	r19, r1
     f16:	09 f0       	breq	.+2      	; 0xf1a <MDIO_voidSetPinValue+0x15c>
     f18:	5f c0       	rjmp	.+190    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTC_REG, A_u8PinId);
     f1a:	a5 e3       	ldi	r26, 0x35	; 53
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e5 e3       	ldi	r30, 0x35	; 53
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <MDIO_voidSetPinValue+0x17a>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <MDIO_voidSetPinValue+0x176>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	4b c0       	rjmp	.+150    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
            break;
        case PIN_LOW:
            CLR_BIT(PORTC_REG, A_u8PinId);
     f42:	a5 e3       	ldi	r26, 0x35	; 53
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e3       	ldi	r30, 0x35	; 53
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <MDIO_voidSetPinValue+0x1a2>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <MDIO_voidSetPinValue+0x19e>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	36 c0       	rjmp	.+108    	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
        default:
            break;
        }
        break;
    case PORTD:
        switch (A_u8Value)
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	3d 83       	std	Y+5, r19	; 0x05
     f74:	2c 83       	std	Y+4, r18	; 0x04
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	c9 f0       	breq	.+50     	; 0xfb0 <MDIO_voidSetPinValue+0x1f2>
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	21 30       	cpi	r18, 0x01	; 1
     f84:	31 05       	cpc	r19, r1
     f86:	41 f5       	brne	.+80     	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTD_REG, A_u8PinId);
     f88:	a2 e3       	ldi	r26, 0x32	; 50
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <MDIO_voidSetPinValue+0x1e8>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <MDIO_voidSetPinValue+0x1e4>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <MDIO_voidSetPinValue+0x21a>
            break;
        case PIN_LOW:
            CLR_BIT(PORTD_REG, A_u8PinId);
     fb0:	a2 e3       	ldi	r26, 0x32	; 50
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e2 e3       	ldi	r30, 0x32	; 50
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <MDIO_voidSetPinValue+0x210>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <MDIO_voidSetPinValue+0x20c>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
        }
        break;
    default:
        break;
    }
}
     fd8:	2d 96       	adiw	r28, 0x0d	; 13
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8PortId, u8 A_u8PinId)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <MDIO_u8GetPinValue+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <MDIO_u8GetPinValue+0x8>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	8a 83       	std	Y+2, r24	; 0x02
     ffa:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8PinValue = 0;
     ffc:	19 82       	std	Y+1, r1	; 0x01
    switch (A_u8PortId)
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	3d 83       	std	Y+5, r19	; 0x05
    1006:	2c 83       	std	Y+4, r18	; 0x04
    1008:	4c 81       	ldd	r20, Y+4	; 0x04
    100a:	5d 81       	ldd	r21, Y+5	; 0x05
    100c:	41 30       	cpi	r20, 0x01	; 1
    100e:	51 05       	cpc	r21, r1
    1010:	41 f1       	breq	.+80     	; 0x1062 <MDIO_u8GetPinValue+0x78>
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	82 30       	cpi	r24, 0x02	; 2
    1018:	91 05       	cpc	r25, r1
    101a:	34 f4       	brge	.+12     	; 0x1028 <MDIO_u8GetPinValue+0x3e>
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	21 15       	cp	r18, r1
    1022:	31 05       	cpc	r19, r1
    1024:	61 f0       	breq	.+24     	; 0x103e <MDIO_u8GetPinValue+0x54>
    1026:	52 c0       	rjmp	.+164    	; 0x10cc <MDIO_u8GetPinValue+0xe2>
    1028:	4c 81       	ldd	r20, Y+4	; 0x04
    102a:	5d 81       	ldd	r21, Y+5	; 0x05
    102c:	42 30       	cpi	r20, 0x02	; 2
    102e:	51 05       	cpc	r21, r1
    1030:	51 f1       	breq	.+84     	; 0x1086 <MDIO_u8GetPinValue+0x9c>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	91 05       	cpc	r25, r1
    103a:	b9 f1       	breq	.+110    	; 0x10aa <MDIO_u8GetPinValue+0xc0>
    103c:	47 c0       	rjmp	.+142    	; 0x10cc <MDIO_u8GetPinValue+0xe2>
    {
    case PORTA:
        local_u8PinValue = GET_BIT(PINA_REG, A_u8PinId);
    103e:	e9 e3       	ldi	r30, 0x39	; 57
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a9 01       	movw	r20, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <MDIO_u8GetPinValue+0x6c>
    1052:	55 95       	asr	r21
    1054:	47 95       	ror	r20
    1056:	8a 95       	dec	r24
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <MDIO_u8GetPinValue+0x68>
    105a:	ca 01       	movw	r24, r20
    105c:	81 70       	andi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	35 c0       	rjmp	.+106    	; 0x10cc <MDIO_u8GetPinValue+0xe2>
        break;
    case PORTB:
        local_u8PinValue = GET_BIT(PINB_REG, A_u8PinId);
    1062:	e6 e3       	ldi	r30, 0x36	; 54
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a9 01       	movw	r20, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <MDIO_u8GetPinValue+0x90>
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <MDIO_u8GetPinValue+0x8c>
    107e:	ca 01       	movw	r24, r20
    1080:	81 70       	andi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	23 c0       	rjmp	.+70     	; 0x10cc <MDIO_u8GetPinValue+0xe2>
        break;
    case PORTC:
        local_u8PinValue = GET_BIT(PINC_REG, A_u8PinId);
    1086:	e3 e3       	ldi	r30, 0x33	; 51
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <MDIO_u8GetPinValue+0xb4>
    109a:	55 95       	asr	r21
    109c:	47 95       	ror	r20
    109e:	8a 95       	dec	r24
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <MDIO_u8GetPinValue+0xb0>
    10a2:	ca 01       	movw	r24, r20
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	11 c0       	rjmp	.+34     	; 0x10cc <MDIO_u8GetPinValue+0xe2>
        break;
    case PORTD:
        local_u8PinValue = GET_BIT(PIND_REG, A_u8PinId);
    10aa:	e0 e3       	ldi	r30, 0x30	; 48
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <MDIO_u8GetPinValue+0xd8>
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <MDIO_u8GetPinValue+0xd4>
    10c6:	ca 01       	movw	r24, r20
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return local_u8PinValue;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortId, u8 A_u8Value)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <MDIO_voidSetPortValue+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <MDIO_voidSetPortValue+0x8>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8PortId)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3c 83       	std	Y+4, r19	; 0x04
    10f6:	2b 83       	std	Y+3, r18	; 0x03
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	d1 f0       	breq	.+52     	; 0x1136 <MDIO_voidSetPortValue+0x58>
    1102:	2b 81       	ldd	r18, Y+3	; 0x03
    1104:	3c 81       	ldd	r19, Y+4	; 0x04
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	2c f4       	brge	.+10     	; 0x1116 <MDIO_voidSetPortValue+0x38>
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	61 f0       	breq	.+24     	; 0x112c <MDIO_voidSetPortValue+0x4e>
    1114:	1e c0       	rjmp	.+60     	; 0x1152 <MDIO_voidSetPortValue+0x74>
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	81 f0       	breq	.+32     	; 0x1140 <MDIO_voidSetPortValue+0x62>
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	81 f0       	breq	.+32     	; 0x114a <MDIO_voidSetPortValue+0x6c>
    112a:	13 c0       	rjmp	.+38     	; 0x1152 <MDIO_voidSetPortValue+0x74>
    {
    case PORTA:
        PORTA_REG = A_u8Value;
    112c:	eb e3       	ldi	r30, 0x3B	; 59
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	80 83       	st	Z, r24
    1134:	0e c0       	rjmp	.+28     	; 0x1152 <MDIO_voidSetPortValue+0x74>
        break;
    case PORTB:
        PORTB_REG = A_u8Value;
    1136:	e8 e3       	ldi	r30, 0x38	; 56
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <MDIO_voidSetPortValue+0x74>
        break;
    case PORTC:
        PORTC_REG = A_u8Value;
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <MDIO_voidSetPortValue+0x74>
        break;
    case PORTD:
        PORTD_REG = A_u8Value;
    114a:	e2 e3       	ldi	r30, 0x32	; 50
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8PortId, u8 A_u8Direction)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <MDIO_voidSetPortDirection+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <MDIO_voidSetPortDirection+0x8>
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8PortId)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3c 83       	std	Y+4, r19	; 0x04
    1178:	2b 83       	std	Y+3, r18	; 0x03
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	d1 f0       	breq	.+52     	; 0x11b8 <MDIO_voidSetPortDirection+0x58>
    1184:	2b 81       	ldd	r18, Y+3	; 0x03
    1186:	3c 81       	ldd	r19, Y+4	; 0x04
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	2c f4       	brge	.+10     	; 0x1198 <MDIO_voidSetPortDirection+0x38>
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	61 f0       	breq	.+24     	; 0x11ae <MDIO_voidSetPortDirection+0x4e>
    1196:	1e c0       	rjmp	.+60     	; 0x11d4 <MDIO_voidSetPortDirection+0x74>
    1198:	2b 81       	ldd	r18, Y+3	; 0x03
    119a:	3c 81       	ldd	r19, Y+4	; 0x04
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	81 f0       	breq	.+32     	; 0x11c2 <MDIO_voidSetPortDirection+0x62>
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	91 05       	cpc	r25, r1
    11aa:	81 f0       	breq	.+32     	; 0x11cc <MDIO_voidSetPortDirection+0x6c>
    11ac:	13 c0       	rjmp	.+38     	; 0x11d4 <MDIO_voidSetPortDirection+0x74>
    {
    case PORTA:
        DDRA_REG = A_u8Direction;
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 83       	st	Z, r24
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <MDIO_voidSetPortDirection+0x74>
        break;
    case PORTB:
        DDRB_REG = A_u8Direction;
    11b8:	e7 e3       	ldi	r30, 0x37	; 55
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	80 83       	st	Z, r24
    11c0:	09 c0       	rjmp	.+18     	; 0x11d4 <MDIO_voidSetPortDirection+0x74>
        break;
    case PORTC:
        DDRC_REG = A_u8Direction;
    11c2:	e4 e3       	ldi	r30, 0x34	; 52
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 83       	st	Z, r24
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <MDIO_voidSetPortDirection+0x74>
        break;
    case PORTD:
        DDRD_REG = A_u8Direction;
    11cc:	e1 e3       	ldi	r30, 0x31	; 49
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <MEXTI_voidConfig>:
void (*EXTI0_callback)(void) = NULL; // to use it with if
void (*EXTI1_callback)(void) = NULL; // to use it with if
void (*EXTI2_callback)(void) = NULL; // to use it with if

void MEXTI_voidConfig(u8 A_u8EXTI, u8 A_u8SenseMode)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	28 97       	sbiw	r28, 0x08	; 8
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
    if (A_u8SenseMode >= 4)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <MEXTI_voidConfig+0x20>
    1200:	58 c0       	rjmp	.+176    	; 0x12b2 <MEXTI_voidConfig+0xd0>
    {
        return;
    }
    switch (A_u8EXTI)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	38 87       	std	Y+8, r19	; 0x08
    120a:	2f 83       	std	Y+7, r18	; 0x07
    120c:	8f 81       	ldd	r24, Y+7	; 0x07
    120e:	98 85       	ldd	r25, Y+8	; 0x08
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	c9 f0       	breq	.+50     	; 0x1248 <MEXTI_voidConfig+0x66>
    1216:	2f 81       	ldd	r18, Y+7	; 0x07
    1218:	38 85       	ldd	r19, Y+8	; 0x08
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	51 f1       	breq	.+84     	; 0x1274 <MEXTI_voidConfig+0x92>
    1220:	8f 81       	ldd	r24, Y+7	; 0x07
    1222:	98 85       	ldd	r25, Y+8	; 0x08
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	09 f0       	breq	.+2      	; 0x122a <MEXTI_voidConfig+0x48>
    1228:	44 c0       	rjmp	.+136    	; 0x12b2 <MEXTI_voidConfig+0xd0>
    {

    case EXTI0: // bits 0,1 clear  ,,MASKING
    {
        MCUCR &= !(SENSE_MODE_MASK << EXTI0_SENSE_B1);
    122a:	e5 e5       	ldi	r30, 0x55	; 85
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	90 81       	ld	r25, Z
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	10 82       	st	Z, r1
        MCUCR |= (A_u8SenseMode << EXTI0_SENSE_B1);
    1236:	a5 e5       	ldi	r26, 0x55	; 85
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e5       	ldi	r30, 0x55	; 85
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	90 81       	ld	r25, Z
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	89 2b       	or	r24, r25
    1244:	8c 93       	st	X, r24
    1246:	35 c0       	rjmp	.+106    	; 0x12b2 <MEXTI_voidConfig+0xd0>
        break;
    }
    case EXTI1: // bits 2,3 clear
    {
        MCUCR &= !(SENSE_MODE_MASK << EXTI1_SENSE_B1);
    1248:	e5 e5       	ldi	r30, 0x55	; 85
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	20 81       	ld	r18, Z
    124e:	e5 e5       	ldi	r30, 0x55	; 85
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	10 82       	st	Z, r1
        MCUCR |= (A_u8SenseMode << EXTI1_SENSE_B1);
    1254:	a5 e5       	ldi	r26, 0x55	; 85
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e5 e5       	ldi	r30, 0x55	; 85
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	28 2f       	mov	r18, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	82 2b       	or	r24, r18
    1270:	8c 93       	st	X, r24
    1272:	1f c0       	rjmp	.+62     	; 0x12b2 <MEXTI_voidConfig+0xd0>
        break;
    }
    case EXTI2:
    {
        switch (A_u8SenseMode)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3c 83       	std	Y+4, r19	; 0x04
    127c:	2b 83       	std	Y+3, r18	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	91 05       	cpc	r25, r1
    1286:	31 f0       	breq	.+12     	; 0x1294 <MEXTI_voidConfig+0xb2>
    1288:	2b 81       	ldd	r18, Y+3	; 0x03
    128a:	3c 81       	ldd	r19, Y+4	; 0x04
    128c:	23 30       	cpi	r18, 0x03	; 3
    128e:	31 05       	cpc	r19, r1
    1290:	49 f0       	breq	.+18     	; 0x12a4 <MEXTI_voidConfig+0xc2>
    1292:	0f c0       	rjmp	.+30     	; 0x12b2 <MEXTI_voidConfig+0xd0>
        {
        case FALLING_EDGE:
            CLR_BIT(MCUCSR, EXTI2_SENSE_B1);
    1294:	a4 e5       	ldi	r26, 0x54	; 84
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e4 e5       	ldi	r30, 0x54	; 84
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 7b       	andi	r24, 0xBF	; 191
    12a0:	8c 93       	st	X, r24
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <MEXTI_voidConfig+0xd0>
            break;
        case RISING_EDGE:
            SET_BIT(MCUCSR, EXTI2_SENSE_B1);
    12a4:	a4 e5       	ldi	r26, 0x54	; 84
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e4 e5       	ldi	r30, 0x54	; 84
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	80 64       	ori	r24, 0x40	; 64
    12b0:	8c 93       	st	X, r24
        break;
    }
    default:
        break;
    }
}
    12b2:	28 96       	adiw	r28, 0x08	; 8
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <MEXTI_voidEnable>:
#define EXTI1_ENABLE_BIT 7 // BIT 7
#define EXTI2_ENABLE_BIT 5 // BIT 5
*/

void MEXTI_voidEnable(u8 A_u8EXTI)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <MEXTI_voidEnable+0x6>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8EXTI)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3b 83       	std	Y+3, r19	; 0x03
    12da:	2a 83       	std	Y+2, r18	; 0x02
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	89 f0       	breq	.+34     	; 0x1308 <MEXTI_voidEnable+0x44>
    12e6:	2a 81       	ldd	r18, Y+2	; 0x02
    12e8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	a1 f0       	breq	.+40     	; 0x1318 <MEXTI_voidEnable+0x54>
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	b9 f4       	brne	.+46     	; 0x1326 <MEXTI_voidEnable+0x62>
    {
    case EXTI0:
        SET_BIT(GICR, EXTI0_ENABLE_BIT);
    12f8:	ab e5       	ldi	r26, 0x5B	; 91
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	eb e5       	ldi	r30, 0x5B	; 91
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	80 64       	ori	r24, 0x40	; 64
    1304:	8c 93       	st	X, r24
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <MEXTI_voidEnable+0x62>
        break;
    case EXTI1:
        SET_BIT(GICR, EXTI1_ENABLE_BIT);
    1308:	ab e5       	ldi	r26, 0x5B	; 91
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e5       	ldi	r30, 0x5B	; 91
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 68       	ori	r24, 0x80	; 128
    1314:	8c 93       	st	X, r24
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <MEXTI_voidEnable+0x62>
        break;
    case EXTI2:
        SET_BIT(GICR, EXTI2_ENABLE_BIT);
    1318:	ab e5       	ldi	r26, 0x5B	; 91
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e5       	ldi	r30, 0x5B	; 91
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <MEXTI_voidDisable>:
void MEXTI_voidDisable(u8 A_u8EXTI)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <MEXTI_voidDisable+0x6>
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8EXTI)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3b 83       	std	Y+3, r19	; 0x03
    1348:	2a 83       	std	Y+2, r18	; 0x02
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	89 f0       	breq	.+34     	; 0x1376 <MEXTI_voidDisable+0x44>
    1354:	2a 81       	ldd	r18, Y+2	; 0x02
    1356:	3b 81       	ldd	r19, Y+3	; 0x03
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	a1 f0       	breq	.+40     	; 0x1386 <MEXTI_voidDisable+0x54>
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	9b 81       	ldd	r25, Y+3	; 0x03
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	b9 f4       	brne	.+46     	; 0x1394 <MEXTI_voidDisable+0x62>
    {
    case EXTI0:
        CLR_BIT(GICR, EXTI0_ENABLE_BIT);
    1366:	ab e5       	ldi	r26, 0x5B	; 91
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e5       	ldi	r30, 0x5B	; 91
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8f 7b       	andi	r24, 0xBF	; 191
    1372:	8c 93       	st	X, r24
    1374:	0f c0       	rjmp	.+30     	; 0x1394 <MEXTI_voidDisable+0x62>
        break;
    case EXTI1:
        CLR_BIT(GICR, EXTI1_ENABLE_BIT);
    1376:	ab e5       	ldi	r26, 0x5B	; 91
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	eb e5       	ldi	r30, 0x5B	; 91
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8f 77       	andi	r24, 0x7F	; 127
    1382:	8c 93       	st	X, r24
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <MEXTI_voidDisable+0x62>
        break;
    case EXTI2:
        CLR_BIT(GICR, EXTI2_ENABLE_BIT);
    1386:	ab e5       	ldi	r26, 0x5B	; 91
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e5       	ldi	r30, 0x5B	; 91
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8f 7d       	andi	r24, 0xDF	; 223
    1392:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <MEXTI_voidClearFlag>:
#define EXTI0_FLAG_BIT 6 // BIT 6
#define EXTI1_FLAG_BIT 7 // BIT 7
#define EXTI2_FLAG_BIT 5 // BIT 5
*/
void MEXTI_voidClearFlag(u8 A_u8EXTI)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <MEXTI_voidClearFlag+0x6>
    13a6:	0f 92       	push	r0
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01

    switch (A_u8EXTI)
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3b 83       	std	Y+3, r19	; 0x03
    13b6:	2a 83       	std	Y+2, r18	; 0x02
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	9b 81       	ldd	r25, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	89 f0       	breq	.+34     	; 0x13e4 <MEXTI_voidClearFlag+0x44>
    13c2:	2a 81       	ldd	r18, Y+2	; 0x02
    13c4:	3b 81       	ldd	r19, Y+3	; 0x03
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	a1 f0       	breq	.+40     	; 0x13f4 <MEXTI_voidClearFlag+0x54>
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	b9 f4       	brne	.+46     	; 0x1402 <MEXTI_voidClearFlag+0x62>
    {
    case EXTI0:
        SET_BIT(GICR, EXTI0_FLAG_BIT);
    13d4:	ab e5       	ldi	r26, 0x5B	; 91
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	eb e5       	ldi	r30, 0x5B	; 91
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 64       	ori	r24, 0x40	; 64
    13e0:	8c 93       	st	X, r24
    13e2:	0f c0       	rjmp	.+30     	; 0x1402 <MEXTI_voidClearFlag+0x62>
        break;
    case EXTI1:
        SET_BIT(GICR, EXTI1_FLAG_BIT);
    13e4:	ab e5       	ldi	r26, 0x5B	; 91
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	eb e5       	ldi	r30, 0x5B	; 91
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 68       	ori	r24, 0x80	; 128
    13f0:	8c 93       	st	X, r24
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <MEXTI_voidClearFlag+0x62>
        break;
    case EXTI2:
        SET_BIT(GICR, EXTI2_FLAG_BIT);
    13f4:	ab e5       	ldi	r26, 0x5B	; 91
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	eb e5       	ldi	r30, 0x5B	; 91
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 62       	ori	r24, 0x20	; 32
    1400:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <MEXTI_voidsetCallBack>:

void MEXTI_voidsetCallBack(u8 A_u8EXTI, void *ptrtofunc(void))
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <MEXTI_voidsetCallBack+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <MEXTI_voidsetCallBack+0x8>
    1416:	0f 92       	push	r0
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	7b 83       	std	Y+3, r23	; 0x03
    1420:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8EXTI)
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3d 83       	std	Y+5, r19	; 0x05
    142a:	2c 83       	std	Y+4, r18	; 0x04
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	81 f0       	breq	.+32     	; 0x1456 <MEXTI_voidsetCallBack+0x48>
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	91 f0       	breq	.+36     	; 0x1464 <MEXTI_voidsetCallBack+0x56>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	a1 f4       	brne	.+40     	; 0x1470 <MEXTI_voidsetCallBack+0x62>
    {
    case EXTI0:
        EXTI0_callback = ptrtofunc;
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	9b 81       	ldd	r25, Y+3	; 0x03
    144c:	90 93 6b 00 	sts	0x006B, r25
    1450:	80 93 6a 00 	sts	0x006A, r24
    1454:	0d c0       	rjmp	.+26     	; 0x1470 <MEXTI_voidsetCallBack+0x62>
        break;
    case EXTI1:
        EXTI1_callback = ptrtofunc;
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	90 93 6d 00 	sts	0x006D, r25
    145e:	80 93 6c 00 	sts	0x006C, r24
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <MEXTI_voidsetCallBack+0x62>
        break;
    case EXTI2:
        EXTI2_callback = ptrtofunc;
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	9b 81       	ldd	r25, Y+3	; 0x03
    1468:	90 93 6f 00 	sts	0x006F, r25
    146c:	80 93 6e 00 	sts	0x006E, r24
        break;
    default:
        break;
    }
    if (ptrtofunc != NULL)
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	31 f0       	breq	.+12     	; 0x1484 <MEXTI_voidsetCallBack+0x76>
    {
        EXTI0_callback = ptrtofunc; // address of ptrfun(ToggleLEd) now moved to EXTI0_callback
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	9b 81       	ldd	r25, Y+3	; 0x03
    147c:	90 93 6b 00 	sts	0x006B, r25
    1480:	80 93 6a 00 	sts	0x006A, r24
    }
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <__vector_1>:

void __vector_1(void) __attribute__((signal)); // ISR call it when interrupt happens, __attribute for linker to know that processor calls it
void __vector_1(void)
{
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	5f 93       	push	r21
    14a6:	6f 93       	push	r22
    14a8:	7f 93       	push	r23
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	af 93       	push	r26
    14b0:	bf 93       	push	r27
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    if (EXTI0_callback != NULL)
    14be:	80 91 6a 00 	lds	r24, 0x006A
    14c2:	90 91 6b 00 	lds	r25, 0x006B
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <__vector_1+0x40>
        EXTI0_callback();
    14ca:	e0 91 6a 00 	lds	r30, 0x006A
    14ce:	f0 91 6b 00 	lds	r31, 0x006B
    14d2:	09 95       	icall
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_2>:

void __vector_2(void) __attribute__((signal)); // ISR call it when interrupt happens, __attribute for linker to know that processor calls it
void __vector_2(void)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    if (EXTI1_callback != NULL)
    1524:	80 91 6c 00 	lds	r24, 0x006C
    1528:	90 91 6d 00 	lds	r25, 0x006D
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	29 f0       	breq	.+10     	; 0x153a <__vector_2+0x40>
        EXTI1_callback();
    1530:	e0 91 6c 00 	lds	r30, 0x006C
    1534:	f0 91 6d 00 	lds	r31, 0x006D
    1538:	09 95       	icall
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <__vector_3>:

void __vector_3(void) __attribute__((signal)); // ISR call it when interrupt happens, __attribute for linker to know that processor calls it
void __vector_3(void)
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	11 24       	eor	r1, r1
    156a:	2f 93       	push	r18
    156c:	3f 93       	push	r19
    156e:	4f 93       	push	r20
    1570:	5f 93       	push	r21
    1572:	6f 93       	push	r22
    1574:	7f 93       	push	r23
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    if (EXTI2_callback != NULL)
    158a:	80 91 6e 00 	lds	r24, 0x006E
    158e:	90 91 6f 00 	lds	r25, 0x006F
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	29 f0       	breq	.+10     	; 0x15a0 <__vector_3+0x40>
        EXTI2_callback();
    1596:	e0 91 6e 00 	lds	r30, 0x006E
    159a:	f0 91 6f 00 	lds	r31, 0x006F
    159e:	09 95       	icall
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <MGI_void_Enable_Global_INT>:
#define F_CPU 8000000UL

#define NULL 0
void (*EXTI_callback)(void) = NULL;
void MGI_void_Enable_Global_INT(void)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, GLOBAL_INT_ENABLE_BIT);
    15ce:	af e5       	ldi	r26, 0x5F	; 95
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ef e5       	ldi	r30, 0x5F	; 95
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	8c 93       	st	X, r24
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <MGI_void_Disable_Global_INT>:

void MGI_void_Disable_Global_INT(void)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, GLOBAL_INT_ENABLE_BIT);
    15ea:	af e5       	ldi	r26, 0x5F	; 95
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ef e5       	ldi	r30, 0x5F	; 95
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8f 77       	andi	r24, 0x7F	; 127
    15f6:	8c 93       	st	X, r24
}
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <MSPI_voidInit>:
#include "../Include/MCAL/SPI/SPI_config.h"

static void (*funcptr)(void) = NULL;

void MSPI_voidInit(void)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    SPI_SPCR = CONC_BIT(SPI_INTERRUPT_ENABLE, SPI_ENABLE, DATA_ORDER, MSTR_SLAVE_SELECT, CLOCK_POLARITY, CLOCK_PHASE, SPR1, SPR0);
    1606:	ed e2       	ldi	r30, 0x2D	; 45
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8e e4       	ldi	r24, 0x4E	; 78
    160c:	80 83       	st	Z, r24
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <MSPI_u8_Getdata>:
u8 MSPI_u8_Getdata(u8 local_u8Data)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	89 83       	std	Y+1, r24	; 0x01
    SPI_SPDR = local_u8Data;
    1620:	ef e2       	ldi	r30, 0x2F	; 47
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	80 83       	st	Z, r24
    while (GET_BIT(SPI_SPSR, SPIF_BIT) == 0)
    1628:	ee e2       	ldi	r30, 0x2E	; 46
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	88 23       	and	r24, r24
    1630:	dc f7       	brge	.-10     	; 0x1628 <MSPI_u8_Getdata+0x14>
        ; // When a serial transfer is complete, the SPIF Flag is set.
    return SPI_SPDR;
    1632:	ef e2       	ldi	r30, 0x2F	; 47
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
}
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <SPI_voidSetCallback>:

void SPI_voidSetCallback(void (*copy_ptrFunc)(void)) // receive from main any func and put it to interrupt
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <SPI_voidSetCallback+0x6>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
    if (copy_ptrFunc != NULL)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	31 f0       	breq	.+12     	; 0x1662 <SPI_voidSetCallback+0x22>
    {
        funcptr = copy_ptrFunc;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	90 93 73 00 	sts	0x0073, r25
    165e:	80 93 72 00 	sts	0x0072, r24
    }
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    if (funcptr != NULL)
    1696:	80 91 72 00 	lds	r24, 0x0072
    169a:	90 91 73 00 	lds	r25, 0x0073
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	29 f0       	breq	.+10     	; 0x16ac <__vector_12+0x40>
    {
        funcptr();
    16a2:	e0 91 72 00 	lds	r30, 0x0072
    16a6:	f0 91 73 00 	lds	r31, 0x0073
    16aa:	09 95       	icall
    }
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <main>:


#if 1
u8 flag=0;
int main(void)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	60 97       	sbiw	r28, 0x10	; 16
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    u8 counterdisp = 0;
    16e6:	18 8a       	std	Y+16, r1	; 0x10
    MDIO_voidInit();
    16e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidInit>
    MSPI_voidInit();
    16ec:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <MSPI_voidInit>
    MGI_void_Enable_Global_INT();
    16f0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <MGI_void_Enable_Global_INT>
    MEXTI_voidConfig(EXTI0, RISING_EDGE); // Configure EXTI0 to trigger on button press
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	63 e0       	ldi	r22, 0x03	; 3
    16f8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <MEXTI_voidConfig>
    MEXTI_voidEnable(EXTI0);
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	0e 94 62 09 	call	0x12c4	; 0x12c4 <MEXTI_voidEnable>
    u8 local_u8_DATA;
    while (1)
    {
        MDIO_voidSetPinValue(PORTA, PIN0, PIN_LOW); // ss``
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	0e 94 df 06 	call	0xdbe	; 0xdbe <MDIO_voidSetPinValue>
        local_u8_DATA = MSPI_u8_Getdata(7);
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <MSPI_u8_Getdata>
    1712:	8f 87       	std	Y+15, r24	; 0x0f

        MDIO_voidSetPinValue(PORTA, PIN0, PIN_HIGH); // ss``
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 df 06 	call	0xdbe	; 0xdbe <MDIO_voidSetPinValue>

        if (local_u8_DATA == 5 )
    171e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1720:	85 30       	cpi	r24, 0x05	; 5
    1722:	79 f7       	brne	.-34     	; 0x1702 <main+0x30>
        {
        	SevenSeg_disp(displayValue);
    1724:	80 91 68 00 	lds	r24, 0x0068
    1728:	0e 94 29 0c 	call	0x1852	; 0x1852 <SevenSeg_disp>
       	    local_u8_DATA = 0;
    172c:	1f 86       	std	Y+15, r1	; 0x0f
            toggle_led();
    172e:	0e 94 0e 0c 	call	0x181c	; 0x181c <toggle_led>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a8 e4       	ldi	r26, 0x48	; 72
    1738:	b3 e4       	ldi	r27, 0x43	; 67
    173a:	8b 87       	std	Y+11, r24	; 0x0b
    173c:	9c 87       	std	Y+12, r25	; 0x0c
    173e:	ad 87       	std	Y+13, r26	; 0x0d
    1740:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a ef       	ldi	r20, 0xFA	; 250
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	8f 83       	std	Y+7, r24	; 0x07
    175c:	98 87       	std	Y+8, r25	; 0x08
    175e:	a9 87       	std	Y+9, r26	; 0x09
    1760:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1762:	6f 81       	ldd	r22, Y+7	; 0x07
    1764:	78 85       	ldd	r23, Y+8	; 0x08
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <main+0xb2>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <main+0x130>
	else if (__tmp > 65535)
    1784:	6f 81       	ldd	r22, Y+7	; 0x07
    1786:	78 85       	ldd	r23, Y+8	; 0x08
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	9a 85       	ldd	r25, Y+10	; 0x0a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	6b 85       	ldd	r22, Y+11	; 0x0b
    179e:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <main+0x112>
    17c6:	88 ec       	ldi	r24, 0xC8	; 200
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <main+0x100>
    17d6:	9c 83       	std	Y+4, r25	; 0x04
    17d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <main+0xf4>
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	6f 81       	ldd	r22, Y+7	; 0x07
    17f0:	78 85       	ldd	r23, Y+8	; 0x08
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <main+0x13c>
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(200);
            toggle_led();
    1816:	0e 94 0e 0c 	call	0x181c	; 0x181c <toggle_led>
    181a:	73 cf       	rjmp	.-282    	; 0x1702 <main+0x30>

0000181c <toggle_led>:
    }
}
#endif
//////////////////////////////////////////////
void toggle_led()
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    static u8 local_u8_flag = 0;
    if (local_u8_flag == 0)
    1824:	80 91 75 00 	lds	r24, 0x0075
    1828:	88 23       	and	r24, r24
    182a:	49 f4       	brne	.+18     	; 0x183e <toggle_led+0x22>
    {
        MDIO_voidSetPinValue(PORTD, PIN0, PIN_HIGH);
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 df 06 	call	0xdbe	; 0xdbe <MDIO_voidSetPinValue>
        local_u8_flag = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	80 93 75 00 	sts	0x0075, r24
    183c:	07 c0       	rjmp	.+14     	; 0x184c <toggle_led+0x30>
    }
    else
    {
        MDIO_voidSetPinValue(PORTD, PIN0, PIN_LOW);
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 df 06 	call	0xdbe	; 0xdbe <MDIO_voidSetPinValue>
        local_u8_flag = 0;
    1848:	10 92 75 00 	sts	0x0075, r1
    }
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <SevenSeg_disp>:

void SevenSeg_disp(u8 A_u8Num)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <SevenSeg_disp+0x6>
    1858:	00 d0       	rcall	.+0      	; 0x185a <SevenSeg_disp+0x8>
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	8a 83       	std	Y+2, r24	; 0x02
    u8 portCValue = 0;  // Initialize a variable to hold the new PORTC value
    1860:	19 82       	std	Y+1, r1	; 0x01


    MDIO_voidSetPinValue(PORTD, PIN2, PIN_LOW);
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 df 06 	call	0xdbe	; 0xdbe <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(PORTD, PIN2, PIN_HIGH);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 df 06 	call	0xdbe	; 0xdbe <MDIO_voidSetPinValue>
    if (1/*A_u8Num == EXTI0*/)
    {
        // Toggle between displaying numbers

        // Reset to ZERO if it exceeds NINE
        if (displayValue > 9)
    1876:	80 91 68 00 	lds	r24, 0x0068
    187a:	8a 30       	cpi	r24, 0x0A	; 10
    187c:	10 f0       	brcs	.+4      	; 0x1882 <SevenSeg_disp+0x30>
        {
            displayValue = 0;
    187e:	10 92 68 00 	sts	0x0068, r1
        }

        // Set the appropriate bits for the 7-segment display
        switch (displayValue)
    1882:	80 91 68 00 	lds	r24, 0x0068
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3c 83       	std	Y+4, r19	; 0x04
    188c:	2b 83       	std	Y+3, r18	; 0x03
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	84 30       	cpi	r24, 0x04	; 4
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <SevenSeg_disp+0x48>
    1898:	4b c0       	rjmp	.+150    	; 0x1930 <SevenSeg_disp+0xde>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	25 30       	cpi	r18, 0x05	; 5
    18a0:	31 05       	cpc	r19, r1
    18a2:	d4 f4       	brge	.+52     	; 0x18d8 <SevenSeg_disp+0x86>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	c1 f1       	breq	.+112    	; 0x191e <SevenSeg_disp+0xcc>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <SevenSeg_disp+0x70>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f1       	breq	.+88     	; 0x1918 <SevenSeg_disp+0xc6>
    18c0:	48 c0       	rjmp	.+144    	; 0x1952 <SevenSeg_disp+0x100>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	61 f1       	breq	.+88     	; 0x1924 <SevenSeg_disp+0xd2>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	51 f1       	breq	.+84     	; 0x192a <SevenSeg_disp+0xd8>
    18d6:	3d c0       	rjmp	.+122    	; 0x1952 <SevenSeg_disp+0x100>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	27 30       	cpi	r18, 0x07	; 7
    18de:	31 05       	cpc	r19, r1
    18e0:	81 f1       	breq	.+96     	; 0x1942 <SevenSeg_disp+0xf0>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	88 30       	cpi	r24, 0x08	; 8
    18e8:	91 05       	cpc	r25, r1
    18ea:	5c f4       	brge	.+22     	; 0x1902 <SevenSeg_disp+0xb0>
    18ec:	2b 81       	ldd	r18, Y+3	; 0x03
    18ee:	3c 81       	ldd	r19, Y+4	; 0x04
    18f0:	25 30       	cpi	r18, 0x05	; 5
    18f2:	31 05       	cpc	r19, r1
    18f4:	01 f1       	breq	.+64     	; 0x1936 <SevenSeg_disp+0xe4>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	86 30       	cpi	r24, 0x06	; 6
    18fc:	91 05       	cpc	r25, r1
    18fe:	f1 f0       	breq	.+60     	; 0x193c <SevenSeg_disp+0xea>
    1900:	28 c0       	rjmp	.+80     	; 0x1952 <SevenSeg_disp+0x100>
    1902:	2b 81       	ldd	r18, Y+3	; 0x03
    1904:	3c 81       	ldd	r19, Y+4	; 0x04
    1906:	28 30       	cpi	r18, 0x08	; 8
    1908:	31 05       	cpc	r19, r1
    190a:	f1 f0       	breq	.+60     	; 0x1948 <SevenSeg_disp+0xf6>
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	89 30       	cpi	r24, 0x09	; 9
    1912:	91 05       	cpc	r25, r1
    1914:	e1 f0       	breq	.+56     	; 0x194e <SevenSeg_disp+0xfc>
    1916:	1d c0       	rjmp	.+58     	; 0x1952 <SevenSeg_disp+0x100>
        {
        case 0:
            portCValue = ZERO;
    1918:	8f e3       	ldi	r24, 0x3F	; 63
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	1a c0       	rjmp	.+52     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 1:
            portCValue = ONE;
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	17 c0       	rjmp	.+46     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 2:
            portCValue = TWO;
    1924:	8b e5       	ldi	r24, 0x5B	; 91
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	14 c0       	rjmp	.+40     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 3:
            portCValue = THREE;
    192a:	8f e4       	ldi	r24, 0x4F	; 79
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	11 c0       	rjmp	.+34     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 4:
            portCValue = FOUR;
    1930:	86 e6       	ldi	r24, 0x66	; 102
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 5:
            portCValue = FIVE;
    1936:	8d e6       	ldi	r24, 0x6D	; 109
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	0b c0       	rjmp	.+22     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 6:
            portCValue = SIX;
    193c:	8d e7       	ldi	r24, 0x7D	; 125
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	08 c0       	rjmp	.+16     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 7:
            portCValue = SEVEN;
    1942:	87 e0       	ldi	r24, 0x07	; 7
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 8:
            portCValue = EIGHT;
    1948:	8f e7       	ldi	r24, 0x7F	; 127
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <SevenSeg_disp+0x100>
            break;
        case 9:
            portCValue = NINE;
    194e:	8f e6       	ldi	r24, 0x6F	; 111
    1950:	89 83       	std	Y+1, r24	; 0x01
            break;
        }

        // Update PORTC with the new value
//        PORTC_REG = portCValue;
        MDIO_voidSetPortValue(PORTC, portCValue);
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	69 81       	ldd	r22, Y+1	; 0x01
    1956:	0e 94 6f 08 	call	0x10de	; 0x10de <MDIO_voidSetPortValue>
        displayValue++;
    195a:	80 91 68 00 	lds	r24, 0x0068
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 68 00 	sts	0x0068, r24
    }
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <__prologue_saves__>:
    1972:	2f 92       	push	r2
    1974:	3f 92       	push	r3
    1976:	4f 92       	push	r4
    1978:	5f 92       	push	r5
    197a:	6f 92       	push	r6
    197c:	7f 92       	push	r7
    197e:	8f 92       	push	r8
    1980:	9f 92       	push	r9
    1982:	af 92       	push	r10
    1984:	bf 92       	push	r11
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	ca 1b       	sub	r28, r26
    199c:	db 0b       	sbc	r29, r27
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	09 94       	ijmp

000019aa <__epilogue_restores__>:
    19aa:	2a 88       	ldd	r2, Y+18	; 0x12
    19ac:	39 88       	ldd	r3, Y+17	; 0x11
    19ae:	48 88       	ldd	r4, Y+16	; 0x10
    19b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    19b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    19b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    19bc:	b9 84       	ldd	r11, Y+9	; 0x09
    19be:	c8 84       	ldd	r12, Y+8	; 0x08
    19c0:	df 80       	ldd	r13, Y+7	; 0x07
    19c2:	ee 80       	ldd	r14, Y+6	; 0x06
    19c4:	fd 80       	ldd	r15, Y+5	; 0x05
    19c6:	0c 81       	ldd	r16, Y+4	; 0x04
    19c8:	1b 81       	ldd	r17, Y+3	; 0x03
    19ca:	aa 81       	ldd	r26, Y+2	; 0x02
    19cc:	b9 81       	ldd	r27, Y+1	; 0x01
    19ce:	ce 0f       	add	r28, r30
    19d0:	d1 1d       	adc	r29, r1
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	ed 01       	movw	r28, r26
    19de:	08 95       	ret

000019e0 <_exit>:
    19e0:	f8 94       	cli

000019e2 <__stop_program>:
    19e2:	ff cf       	rjmp	.-2      	; 0x19e2 <__stop_program>
